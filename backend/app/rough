# from fastapi import FastAPI
# from app.routers import upload, question
# from app.db import init_db

# app = FastAPI()

# init_db()

# app.include_router(upload.router, prefix="/api")
# app.include_router(question.router, prefix="/api")

# from fastapi import FastAPI
# from fastapi.middleware.cors import CORSMiddleware
# from app.routers import upload, question
# from app.db import init_db

# app = FastAPI(title="PDF QA API")

# # Configure CORS
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],  # In production, replace with specific origins
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# # Initialize database
# init_db()

# # Include routers
# app.include_router(upload.router, prefix="/api", tags=["upload"])
# app.include_router(question.router, prefix="/api", tags=["question"])

# @app.get("/")
# async def root():
#     return {"message": "PDF QA API is running"}


# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# from app.models import Base

# SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

# engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# def init_db():
#     Base.metadata.create_all(bind=engine)
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# from app.models import Base

# SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

# engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# def init_db():
#     # Create the database tables if they don't exist
#     Base.metadata.create_all(bind=engine)

# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()